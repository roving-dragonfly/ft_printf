* Objectives
** Conversions
*** c
    If no l modifier is present, the int argument is converted to an unsigned  char,  and  the  resulting
    character is written.  If an l modifier is present, the wint_t (wide character) argument is converted
    to a multibyte sequence by a call to the wcrtomb(3) function, with a conversion state starting in the
    initial state, and the resulting multibyte string is written.
*** s
    If  no  l  modifier  is present: the const char * argument is expected to be a pointer to an array of
    character type (pointer to a string).  Characters from the array are written up to (but  not  includ‐
    ing)  a  terminating null byte ('\0'); if a precision is specified, no more than the number specified
    are written.  If a precision is given, no null byte need be present; if the precision is  not  speci‐
    fied, or is greater than the size of the array, the array must contain a terminating null byte.
*** p
    The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).
*** d,i
    The int argument is converted to signed decimal notation.  The precision, if any, gives  the  minimum
    number  of digits that must appear; if the converted value requires fewer digits, it is padded on the
    left with zeros.  The default precision is 1.  When 0 is printed with an explicit  precision  0,  the
    output is empty.
*** f
    The  double  argument is rounded and converted to decimal notation in the style [-]ddd.ddd, where the
    number of digits after the decimal-point character is equal to the precision specification.   If  the
    precision is missing, it is taken as 6; if the precision is explicitly zero, no decimal-point charac‐
    ter appears.  If a decimal point appears, at least one digit appears before it.
**** Have to handle flag 1 & L
*** o, u, x, X
    The unsigned int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexa‐
    decimal (x and X) notation.  The letters abcdef are used for x conversions; the  letters  ABCDEF  are
    used  for X conversions.  The precision, if any, gives the minimum number of digits that must appear;
    if the converted value requires fewer digits, it is padded on the left with zeros.  The default  pre‐
    cision is 1.  When 0 is printed with an explicit precision 0, the output is empty.
** Length
Here, "integer conversion" stands for d, i, o, u, x, or X conversion.
*** hh
   A following integer conversion corresponds to a signed char or unsigned char argument, or a following
   n conversion corresponds to a pointer to a signed char argument.
*** h
    A following integer conversion corresponds to a short int or unsigned short int argument, or  a  fol‐
    lowing n conversion corresponds to a pointer to a short int argument.
*** ll
    A following integer conversion corresponds to a long long int or unsigned long  long  int
    argument, or a following n conversion corresponds to a pointer to a long long int argument.
*** l
    A  following  integer conversion corresponds to a long int or unsigned long int argument, or a
    following n conversion corresponds to a pointer to a long int argument, or a following  c  conversion
    corresponds to a wint_t argument, or a following s conversion corresponds to a pointer to wchar_t ar‐
    gument.

** Flags
*** #
    The value should be converted to an "alternate form".  For o conversions, the first character of  the
    output string is made zero (by prefixing a 0 if it was not zero already).  For x and X conversions, a
    nonzero result has the string "0x" (or "0X" for X conversions) prepended to it.  For a, A, e,  E,  f,
    F,  g, and G conversions, the result will always contain a decimal point, even if no digits follow it
    (normally, a decimal point appears in the results of those conversions only if a digit follows).  For
    g  and G conversions, trailing zeros are not removed from the result as they would otherwise be.  For
    other conversions, the result is undefined.
*** 0
    The value should be zero padded.  For d, i, o, u, x, X, a, A, e, E, f, F, g, and G  conversions,  the
    converted  value  is padded on the left with zeros rather than blanks.  If the 0 and - flags both ap‐
    pear, the 0 flag is ignored.  If a precision is given with a numeric conversion (d, i, o, u,  x,  and
    X), the 0 flag is ignored.  For other conversions, the behavior is undefined.
*** -
    The  converted  value is to be left adjusted on the field boundary.  (The default is right justifica‐
    tion.)  The converted value is padded on the right with blanks, rather than on the left  with  blanks
    or zeros.  A - overrides a 0 if both are given.
*** +
    A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default,
    a sign is used only for negative numbers.  A + overrides a space if both are used.
*** Space
    A blank should be left before a positive number (or empty string) produced by a signed con‐
    version.
** Precision
   An optional precision, in the form of a period ('.')  followed by an optional decimal digit string.  Instead
   of a decimal digit string one may write "*" or "*m$" (for some decimal integer m) to specify that the preci‐
   sion is given in the next argument, or in the m-th argument, respectively, which must be of  type  int.   If
   the  precision is given as just '.', the precision is taken to be zero.  A negative precision is taken as if
   the precision were omitted.  This gives the minimum number of digits to appear for d, i, o, u, x, and X con‐
   versions, the number of digits to appear after the radix character for a, A, e, E, f, and F conversions, the
   maximum number of significant digits for g and G conversions, or the maximum  number  of  characters  to  be
   printed from a string for s and S conversions.
** Width
   An  optional  decimal digit string (with nonzero first digit) specifying a minimum field width.  If the con‐
   verted value has fewer characters than the field width, it will be padded with spaces on the left (or right,
   if  the  left-adjustment flag has been given).  Instead of a decimal digit string one may write "*" or "*m$"
   (for some decimal integer m) to specify that the field width is given in the next argument, or in  the  m-th
   argument,  respectively,  which must be of type int.  A negative field width is taken as a '-' flag followed
   by a positive field width.  In no case does a nonexistent or small field width cause truncation of a  field;
   if the result of a conversion is wider than the field width, the field is expanded to contain the conversion
   result.
* Goals
** vsnprintf
#+BEGIN_SRC c
int vsnprintf(char *str, size_t size, const char *format, va_list ap);
#+END_SRC
This function is the backbone of printf, once done we just have to compose it to make all others.

